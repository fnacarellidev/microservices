// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sqlc_queries.sql

package pgquery

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
	post_owner, content
) VALUES (
	$1, $2
) RETURNING id
`

type CreatePostParams struct {
	PostOwner string
	Content   string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPost, arg.PostOwner, arg.Content)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username, password
) VALUES (
	$1, $2
) RETURNING id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePostById, id)
	return err
}

const getPasswordFromUser = `-- name: GetPasswordFromUser :one
SELECT password FROM users WHERE username = $1
`

func (q *Queries) GetPasswordFromUser(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordFromUser, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getPostsFromUser = `-- name: GetPostsFromUser :many
SELECT id, content, created_at FROM posts WHERE post_owner = $1
`

type GetPostsFromUserRow struct {
	ID        uuid.UUID
	Content   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetPostsFromUser(ctx context.Context, postOwner string) ([]GetPostsFromUserRow, error) {
	rows, err := q.db.Query(ctx, getPostsFromUser, postOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsFromUserRow
	for rows.Next() {
		var i GetPostsFromUserRow
		if err := rows.Scan(&i.ID, &i.Content, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
