// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sqlc_queries.sql

package pgquery

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username, password
) VALUES (
	$1, $2
) RETURNING id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPasswordFromUser = `-- name: GetPasswordFromUser :one
SELECT password FROM users WHERE username = $1
`

func (q *Queries) GetPasswordFromUser(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordFromUser, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getRecordsFromUser = `-- name: GetRecordsFromUser :many
SELECT r.id, r.title, r.content, r.created_at
FROM users u
JOIN diary d ON u.id = d.diary_owner
JOIN records r ON d.id = r.diary_id
WHERE u.username = $1
`

type GetRecordsFromUserRow struct {
	ID        uuid.UUID
	Title     string
	Content   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetRecordsFromUser(ctx context.Context, username string) ([]GetRecordsFromUserRow, error) {
	rows, err := q.db.Query(ctx, getRecordsFromUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecordsFromUserRow
	for rows.Next() {
		var i GetRecordsFromUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
